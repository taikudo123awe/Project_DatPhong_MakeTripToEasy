// controllers/bookingController.js
const { Op } = require('sequelize');
const sequelize = require('../config/database');
const Booking = require('../models/Booking');
const Room = require('../models/Room');
const Customer = require('../models/Customer');
const Invoice = require('../models/Invoice');
const Provider = require('../models/Provider'); // C·∫ßn Provider ƒë·ªÉ ki·ªÉm tra quy·ªÅn

// S·ª¨A L·∫†I H√ÄM N√ÄY: L·∫•y t·∫•t c·∫£ booking v√† gom nh√≥m
exports.listAllBookings = async (req, res) => {
  try {
    const providerId = req.session.provider.id;

    // L·∫•y t·∫•t c·∫£ booking
    const allBookings = await Booking.findAll({
      include: [
        {
          model: Room,
          where: { providerId: providerId },
          required: true,
          attributes: ['roomName']
        },
        {
          model: Customer,
          attributes: ['fullName', 'phoneNumber']
        },
        {
          model: Invoice,
          attributes: ['status'],
          required: false
        }
      ],
      order: [
        // S·ª≠a l·∫°i th·ª© t·ª± s·∫Øp x·∫øp
        sequelize.literal(`CASE Booking.status 
          WHEN 'Ch·ªù nh·∫≠n ph√≤ng' THEN 1 
          WHEN 'ƒêang s·ª≠ d·ª•ng' THEN 2 
          WHEN 'ƒê√£ ho√†n th√†nh' THEN 3  
          WHEN 'ƒê√£ h·ªßy' THEN 4 
          ELSE 5 END`),
        ['checkInDate', 'ASC']
      ]
    });

    // Gom nh√≥m bookings
    const groupedBookings = {
      pending: [],
      inUse: [],
      completed: [], // <-- TH√äM M·ªöI
      cancelled: []
    };

    allBookings.forEach(booking => {
      if (booking.status === 'Ch·ªù nh·∫≠n ph√≤ng') {
        groupedBookings.pending.push(booking);
      } else if (booking.status === 'ƒêang s·ª≠ d·ª•ng') {
        groupedBookings.inUse.push(booking);
      } else if (booking.status === 'ƒê√£ ho√†n th√†nh') { // <-- TH√äM M·ªöI
        groupedBookings.completed.push(booking);
      } else if (booking.status === 'ƒê√£ h·ªßy') {
        groupedBookings.cancelled.push(booking);
      }
    });

    res.render('provider/bookings', {
      pendingBookings: groupedBookings.pending,
      inUseBookings: groupedBookings.inUse,
      completedBookings: groupedBookings.completed, // <-- TRUY·ªÄN BI·∫æN M·ªöI
      cancelledBookings: groupedBookings.cancelled
    });

  } catch (err) {
    console.error('L·ªói khi l·∫•y danh s√°ch ƒë·∫∑t ph√≤ng:', err);
    res.status(500).send('L·ªói m√°y ch·ªß');
  }
};
// Hi·ªÉn th·ªã chi ti·∫øt
exports.showBookingDetails = async (req, res) => {
  try {
    const providerId = req.session.provider.id;
    const { bookingId } = req.params;

    const booking = await Booking.findOne({
      where: { bookingId },
      include: [
        {
          model: Room,
          where: { providerId }, // Ki·ªÉm tra quy·ªÅn s·ªü h·ªØu
          required: true
        },
        {
          model: Customer // L·∫•y ƒë·∫ßy ƒë·ªß th√¥ng tin kh√°ch h√†ng
        }
      ]
    });

    if (!booking) {
      return res.status(404).send('Kh√¥ng t√¨m th·∫•y ƒë∆°n ƒë·∫∑t ph√≤ng n√†y.');
    }

    res.render('provider/booking-details', { booking });
  } catch (err) {
    console.error('L·ªói khi xem chi ti·∫øt:', err);
    res.status(500).send('L·ªói m√°y ch·ªß');
  }
};

// X√°c nh·∫≠n nh·∫≠n ph√≤ng
exports.confirmCheckIn = async (req, res) => {
  const t = await sequelize.transaction();
  try {
    const providerId = req.session.provider.id;
    const { bookingId } = req.body;

    const booking = await Booking.findOne({
      where: { bookingId, status: 'Ch·ªù nh·∫≠n ph√≤ng' },
      include: [{
        model: Room,
        where: { providerId },
        required: true
      }],
      transaction: t
    });

    if (!booking) {
      await t.rollback();
      return res.status(404).send('Kh√¥ng t√¨m th·∫•y ƒë∆°n ho·∫∑c ƒë∆°n ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω.');
    }

    // C·∫≠p nh·∫≠t status booking
    await booking.update({ status: 'ƒêang s·ª≠ d·ª•ng' }, { transaction: t });

    // T·∫°o h√≥a ƒë∆°n
    await Invoice.create({
      bookingId: booking.bookingId,
      customerId: booking.customerId,
      amount: booking.totalAmount,
      invoiceDate: new Date(),
      status: 'Ch·ªù thanh to√°n'
    }, { transaction: t });

    await t.commit();
    res.redirect('/provider/bookings');
  } catch (err) {
    await t.rollback();
    console.error('L·ªói khi x√°c nh·∫≠n nh·∫≠n ph√≤ng:', err);
    res.status(500).send('L·ªói m√°y ch·ªß');
  }
};

// H·ªßy ƒë∆°n
exports.cancelBooking = async (req, res) => {
  try {
    const providerId = req.session.provider.id;
    const { bookingId } = req.body;

    const booking = await Booking.findOne({
      where: { bookingId, status: 'Ch·ªù nh·∫≠n ph√≤ng' },
      include: [{
        model: Room,
        where: { providerId },
        required: true
      }]
    });

    if (!booking) {
      return res.status(404).send('Kh√¥ng t√¨m th·∫•y ƒë∆°n ho·∫∑c kh√¥ng th·ªÉ h·ªßy.');
    }

    // C·∫≠p nh·∫≠t tr·∫°ng th√°i
    await booking.update({ status: 'ƒê√£ h·ªßy' });
    res.redirect('/provider/bookings');
  } catch (err) {
    console.error('L·ªói khi h·ªßy ƒë∆°n:', err);
    res.status(500).send('L·ªói m√°y ch·ªß');
  }
};

// Hi·ªÉn th·ªã form ƒë·∫∑t ph√≤ng cho kh√°ch
exports.showBookingForm = async (req, res) => {
  const roomId = req.params.roomId;
  const { checkInDate, checkOutDate, numberOfGuests } = req.query; // üëà l·∫•y d·ªØ li·ªáu t·ª´ URL query

  try {
    const room = await Room.findByPk(roomId);
    if (!room) return res.status(404).send("Kh√¥ng t√¨m th·∫•y ph√≤ng");

    // Render view, truy·ªÅn th√™m d·ªØ li·ªáu ƒë√£ ch·ªçn (n·∫øu c√≥)
    res.render("customer/booking", {
      room,
      checkInDate: checkInDate || "",
      checkOutDate: checkOutDate || "",
      numberOfGuests: numberOfGuests || "",
    });
  } catch (err) {
    console.error("‚ùå L·ªói hi·ªÉn th·ªã form ƒë·∫∑t ph√≤ng:", err);
    res.status(500).send("L·ªói m√°y ch·ªß");
  }
};


// X·ª≠ l√Ω khi kh√°ch ƒë·∫∑t ph√≤ng
exports.handleBooking = async (req, res) => {
  const { checkInDate, checkOutDate, numberOfGuests } = req.body;
  const customerId = req.session.customer.customerId;
  const roomId = req.params.roomId;

  try {
    const room = await Room.findByPk(roomId);
    if (!room) return res.status(404).send("Kh√¥ng t√¨m th·∫•y ph√≤ng");

    // --- T√çNH TO√ÅN S·ªê ƒê√äM V√Ä T·ªîNG TI·ªÄN ---
    const date1 = new Date(checkInDate);
    const date2 = new Date(checkOutDate);

    // Ki·ªÉm tra ng√†y h·ª£p l·ªá (ng√†y tr·∫£ ph√≤ng ph·∫£i sau ng√†y nh·∫≠n ph√≤ng)
    if (isNaN(date1) || isNaN(date2) || date1 >= date2) {
       // N√™n c√≥ validate ·ªü client-side, nh∆∞ng th√™m ·ªü ƒë√¢y ƒë·ªÉ an to√†n
      console.error("‚ùå Ng√†y nh·∫≠n/tr·∫£ ph√≤ng kh√¥ng h·ª£p l·ªá:", checkInDate, checkOutDate);
      // C√≥ th·ªÉ render l·∫°i trang ƒë·∫∑t ph√≤ng v·ªõi l·ªói
      return res.status(400).send("Ng√†y nh·∫≠n ph√≤ng ho·∫∑c tr·∫£ ph√≤ng kh√¥ng h·ª£p l·ªá.");
    }

    // T√≠nh s·ªë mili gi√¢y ch√™nh l·ªách
    const timeDifference = date2.getTime() - date1.getTime();

    // Chuy·ªÉn ƒë·ªïi mili gi√¢y sang s·ªë ng√†y (s·ªë ƒë√™m)
    const numberOfNights = Math.ceil(timeDifference / (1000 * 3600 * 24)); // 1000ms * 60s * 60m * 24h

    // T√≠nh t·ªïng ti·ªÅn
    const totalAmount = room.price * numberOfNights;
    // --- K·∫æT TH√öC T√çNH TO√ÅN ---

    await Booking.create({
      bookingDate: new Date(),
      checkInDate,
      checkOutDate,
      numberOfGuests,
      customerId,
      roomId,
      totalAmount, // S·ª≠ d·ª•ng totalAmount ƒë√£ t√≠nh
      status: "Ch·ªù nh·∫≠n ph√≤ng"
    });

    // Chuy·ªÉn h∆∞·ªõng ƒë·∫øn trang l·ªãch s·ª≠/phi·∫øu ƒë·∫∑t ph√≤ng sau khi ƒë·∫∑t th√†nh c√¥ng
    res.redirect("/customer/history");

  } catch (err) {
    console.error("‚ùå L·ªói khi ƒë·∫∑t ph√≤ng:", err);
    // C√≥ th·ªÉ render l·∫°i trang ƒë·∫∑t ph√≤ng v·ªõi l·ªói
    res.status(500).send("ƒê·∫∑t ph√≤ng th·∫•t b·∫°i. Vui l√≤ng th·ª≠ l·∫°i.");
  }
};

// Hi·ªÉn th·ªã danh s√°ch c√°c ƒë∆°n ƒë·∫∑t ph√≤ng c·ªßa customer
exports.listCustomerBookings = async (req, res) => {
  try {
    const customerId = req.session.customer.customerId;

    const bookings = await Booking.findAll({
      where: { customerId },
      include: [Room], // L·∫•y th√™m th√¥ng tin ph√≤ng
      order: [["bookingDate", "DESC"]]
    });

    res.render("customer/booking-list", { bookings });
  } catch (err) {
    console.error("‚ùå L·ªói khi l·∫•y danh s√°ch booking c·ªßa kh√°ch:", err);
    res.status(500).send("L·ªói m√°y ch·ªß");
  }
};

// Kh√°ch h√†ng h·ªßy ƒë·∫∑t ph√≤ng (ch·ªâ khi ƒëang "Ch·ªù nh·∫≠n ph√≤ng")
exports.cancelBookingByCustomer = async (req, res) => {
  try {
    const { bookingId } = req.body;
    const customerId = req.session.customer?.customerId;

    if (!customerId) {
      return res.redirect('/customer/login');
    }

    // T√¨m booking c·ªßa kh√°ch h√†ng ƒëang "Ch·ªù nh·∫≠n ph√≤ng"
    const booking = await Booking.findOne({
      where: { bookingId, customerId, status: 'Ch·ªù nh·∫≠n ph√≤ng' },
    });

    if (!booking) {
      req.session.error = 'Kh√¥ng th·ªÉ h·ªßy ƒë∆°n n√†y.';
      return res.redirect('/customer/history-dashboard');
    }

    // C·∫≠p nh·∫≠t tr·∫°ng th√°i booking
    await booking.update({ status: 'ƒê√£ h·ªßy' });

    // C·∫≠p nh·∫≠t h√≥a ƒë∆°n (n·∫øu c√≥)
    await Invoice.update(
      { status: 'ƒê√£ h·ªßy' },
      { where: { bookingId: booking.bookingId } }
    );

    req.session.success = 'ƒê√£ h·ªßy ƒë·∫∑t ph√≤ng th√†nh c√¥ng.';
    res.redirect('/customer/history-dashboard');
  } catch (err) {
    console.error('‚ùå L·ªói khi kh√°ch h·ªßy ƒë·∫∑t ph√≤ng:', err);
    res.status(500).send('L·ªói m√°y ch·ªß');
  }
};