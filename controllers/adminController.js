const Provider = require('../models/Provider');
const Room = require('../models/Room');
const Review = require('../models/Review');
const Feedback = require('../models/Feedback');
const Booking = require('../models/Booking');
const Invoice = require('../models/Invoice');
const PaymentInfo = require('../models/PaymentInfo');
const validator = require('validator');
const sequelize = require('../config/database');
const Account = require('../models/Account');
const fs = require('fs');
const path = require('path');
const { Op } = require('sequelize');
const Customer = require('../models/Customer'); // require Customer de thuc hien quan ly tai khoan nguoi dung

// 1Ô∏è‚É£ Hi·ªÉn th·ªã danh s√°ch ph√≤ng (qu·∫£n l√Ω b√†i ƒëƒÉng)
exports.getAllRooms = async (req, res) => {
    try {
        const { status } = req.query; // l·ªçc theo tr·∫°ng th√°i
        const whereCondition = status ? { approvalStatus: status } : {};

        const rooms = await Room.findAll({
            where: whereCondition,
            include: [{ model: Provider, attributes: ['providerName', 'email'] }],
            order: [['postedAt', 'DESC']]
        });

        res.render('admin/roomList', { rooms, selectedStatus: status });
    } catch (error) {
        console.error('‚ùå L·ªói khi l·∫•y danh s√°ch ph√≤ng:', error);
        res.status(500).send('L·ªói khi t·∫£i danh s√°ch ph√≤ng');
    }
};

// 2Ô∏è‚É£ Xem chi ti·∫øt b√†i ƒëƒÉng
exports.getRoomDetail = async (req, res) => {
    try {
        const room = await Room.findByPk(req.params.id, {
            include: [{ model: Provider, attributes: ['providerName', 'email', 'phoneNumber'] }]
        });

        if (!room) return res.status(404).send('Kh√¥ng t√¨m th·∫•y b√†i ƒëƒÉng');

        res.render('admin/roomDetail', { room });
    } catch (error) {
        console.error('‚ùå L·ªói khi l·∫•y chi ti·∫øt ph√≤ng:', error);
        res.status(500).send('L·ªói khi t·∫£i chi ti·∫øt ph√≤ng');
    }
};

// 3Ô∏è‚É£ Duy·ªát b√†i ƒëƒÉng
exports.approveRoom = async (req, res) => {
    try {
        const roomId = req.params.id;
        const room = await Room.findByPk(roomId);

        if (!room) return res.status(404).send('Kh√¥ng t√¨m th·∫•y ph√≤ng');

        await room.update({ approvalStatus: 'ƒê√£ duy·ªát' });

        // üîî G·ª≠i th√¥ng b√°o (v√≠ d·ª• log ra console, ho·∫∑c sau n√†y th√™m g·ª≠i email)
        console.log(`‚úÖ Ph√≤ng "${room.roomName}" ƒë√£ ƒë∆∞·ª£c duy·ªát.`);

        res.redirect('/admin/rooms?status=Ch·ªù duy·ªát');
    } catch (error) {
        console.error('‚ùå L·ªói khi duy·ªát ph√≤ng:', error);
        res.status(500).send('L·ªói khi duy·ªát ph√≤ng');
    }
};

// 4Ô∏è‚É£ T·ª´ ch·ªëi b√†i ƒëƒÉng
exports.rejectRoom = async (req, res) => {
    try {
        const { reason } = req.body;
        const roomId = req.params.id;

        const room = await Room.findByPk(roomId);
        if (!room) return res.status(404).send('Kh√¥ng t√¨m th·∫•y ph√≤ng');

        await room.update({ approvalStatus: 'T·ª´ ch·ªëi' });

        console.log(`‚ùå Ph√≤ng "${room.roomName}" b·ªã t·ª´ ch·ªëi. L√Ω do: ${reason}`);

        res.redirect('/admin/rooms?status=Ch·ªù duy·ªát');
    } catch (error) {
        console.error('‚ùå L·ªói khi t·ª´ ch·ªëi ph√≤ng:', error);
        res.status(500).send('L·ªói khi t·ª´ ch·ªëi ph√≤ng');
    }
};
//ƒê·∫øm t·ªïng s·ªë ph√≤ng v√† s·ªë ph√≤ng c√≥ tr·∫°ng th√°i ch·ªù duy·ªát
exports.getDashboard = async (req, res) => {
    try {
        const admin = req.session.admin;

        const [totalRooms, pendingRooms,totalCustomers, totalProviders] = await Promise.all([
            Room.count(),
            Room.count({ where: { approvalStatus: 'Ch·ªù duy·ªát' } }),
            // ƒê·∫øm Customer (role=2) ƒëang active
            Account.count({ where: { role: 2, status: 'active' } }),
            // ƒê·∫øm Provider (role=1) ƒëang active
            Account.count({ where: { role: 1, status: 'active' } })
        ]);
        const approvalRate = totalRooms > 0 ? (((totalRooms - pendingRooms) / totalRooms) * 100).toFixed(0) : 0;
        // Render ra view dashboard v√† truy·ªÅn s·ªë li·ªáu
        res.render('admin/dashboard', {
            admin,
            totalRooms,
            pendingRooms,
            totalCustomers, // <-- Truy·ªÅn s·ªë customer
            totalProviders, // <-- Truy·ªÅn s·ªë provider
            approvalRate    // <-- Truy·ªÅn t·ª∑ l·ªá duy·ªát
        });
    } catch (err) {
        console.error('‚ùå L·ªói l·∫•y s·ªë li·ªáu dashboard:', err);
        res.status(500).send('L·ªói t·∫£i dashboard');
    }
};

//Ph∆∞∆°ng th·ª©c n√†y ƒë·ªÉ xo√° ph√≤ng c·ªßa ADMIN
exports.deleteRoom = async (req, res) => {
    try {
        const roomId = req.params.id;
        const { reason } = req.body;

        if (!reason || reason.trim() === '') {
            return res.redirect(
                `/admin/rooms?error=${encodeURIComponent('Vui l√≤ng nh·∫≠p l√Ω do x√≥a b√†i ƒëƒÉng!')}`
            );
        }

        const room = await Room.findByPk(roomId, {
            include: [
                {
                    model: Provider,
                    attributes: ['providerId', 'providerName', 'email'],
                },
            ],
        });

        if (!room) {
            return res.redirect(
                `/admin/rooms?error=${encodeURIComponent('Ph√≤ng kh√¥ng t·ªìn t·∫°i ho·∫∑c ƒë√£ b·ªã x√≥a!')}`
            );
        }

        const roomName = room.roomName;
        const providerEmail = room.Provider?.email || null;
        const imagePath = room.image;

        // ‚úÖ X√≥a ·∫£nh n·∫øu c√≥
        if (imagePath) {
            const fullImagePath = path.join(__dirname, '..', 'public', imagePath);
            try {
                if (fs.existsSync(fullImagePath)) {
                    fs.unlinkSync(fullImagePath);
                    console.log(`üóëÔ∏è ƒê√£ x√≥a ·∫£nh: ${fullImagePath}`);
                }
            } catch (err) {
                console.error(`‚ö†Ô∏è L·ªói khi x√≥a ·∫£nh: ${err.message}`);
            }
        }

        // ‚úÖ 1. L·∫•y t·∫•t c·∫£ reviewId c·ªßa ph√≤ng
        const reviews = await Review.findAll({ where: { roomId } });
        const reviewIds = reviews.map(r => r.reviewId);

        // ‚úÖ 2. X√≥a feedback tr∆∞·ªõc (n·∫øu c√≥)
        if (reviewIds.length > 0) {
            await Feedback.destroy({ where: { reviewId: reviewIds } });
            console.log(`üßπ ƒê√£ x√≥a feedback li√™n quan ƒë·∫øn review.`);
        }

        // ‚úÖ 3. X√≥a review
        await Review.destroy({ where: { roomId } });

        // ‚úÖ 4. X√≥a Invoice & Booking
        const bookings = await Booking.findAll({ where: { roomId } });

        if (bookings.length > 0) {
            const bookingIds = bookings.map(b => b.bookingId);

            // ‚ùó X√≥a Invoice tr∆∞·ªõc ƒë·ªÉ tr√°nh l·ªói kh√≥a ngo·∫°i
            await Invoice.destroy({ where: { bookingId: bookingIds } });
            console.log(`üßæ ƒê√£ x√≥a h√≥a ƒë∆°n li√™n quan ƒë·∫øn ph√≤ng ${roomId}`);

            // Sau ƒë√≥ m·ªõi x√≥a Booking
            await Booking.destroy({ where: { roomId } });
            console.log(`üìÜ ƒê√£ x√≥a t·∫•t c·∫£ booking c·ªßa ph√≤ng ${roomId}`);
        }

        // ‚úÖ 5. Cu·ªëi c√πng x√≥a ph√≤ng
        await room.destroy();

        console.log(`‚úÖ Admin ƒë√£ x√≥a ph√≤ng ID: ${roomId} | T√™n: ${roomName} | L√Ω do: ${reason}`);

        if (providerEmail) {
            console.log(`üìß G·ª≠i th√¥ng b√°o t·ªõi ${providerEmail}`);
            console.log(`N·ªôi dung: Ph√≤ng "${roomName}" ƒë√£ b·ªã x√≥a. L√Ω do: ${reason}`);
        }

        res.redirect(
            `/admin/rooms?success=${encodeURIComponent(`ƒê√£ x√≥a b√†i ƒëƒÉng "${roomName}" th√†nh c√¥ng!`)}`
        );
    } catch (error) {
        console.error('‚ùå L·ªói khi x√≥a ph√≤ng:', error);
        res.redirect(
            `/admin/rooms?error=${encodeURIComponent('ƒê√£ x·∫£y ra l·ªói khi x√≥a b√†i ƒëƒÉng. Vui l√≤ng th·ª≠ l·∫°i!')}`
        );
    }
};

//=========== Quan ly tai khoan nguoi dung ===========
// Hi·ªÉn th·ªã danh s√°ch t√†i kho·∫£n (Customer & Provider)
exports.listUsers = async (req, res) => {
    try {
        const { status } = req.query; // L·ªçc theo tr·∫°ng th√°i ('active', 'locked', 'deleted')
        const whereCondition = {
            role: { [Op.ne]: 0 } // Kh√¥ng hi·ªÉn th·ªã admin (role != 0)
        };
        if (status && ['active', 'locked', 'deleted'].includes(status)) {
            whereCondition.status = status;
        }

        const accounts = await Account.findAll({
            where: whereCondition,
            include: [
                // Include Customer ho·∫∑c Provider ƒë·ªÉ l·∫•y t√™n (n·∫øu c√≥)
                { model: Customer, attributes: ['fullName'], required: false },
                { model: Provider, attributes: ['providerName'], required: false }
            ],
            order: [['accountId', 'ASC']]
        });

        res.render('admin/userList', { accounts, selectedStatus: status });
    } catch (error) {
        console.error('‚ùå L·ªói khi l·∫•y danh s√°ch t√†i kho·∫£n:', error);
        res.status(500).send('L·ªói khi t·∫£i danh s√°ch t√†i kho·∫£n');
    }
};
// Hi·ªÉn th·ªã chi ti·∫øt t√†i kho·∫£n
exports.showUserDetails = async (req, res) => {
    try {
        const accountId = req.params.accountId;
        const account = await Account.findByPk(accountId, {
            include: [
                { model: Customer, required: false },
                { model: Provider, required: false }
            ]
        });

        if (!account || account.role === 0) { // Kh√¥ng cho xem admin
            return res.status(404).send('Kh√¥ng t√¨m th·∫•y t√†i kho·∫£n.');
        }

        res.render('admin/userDetail', { account });
    } catch (error) {
        console.error('‚ùå L·ªói khi xem chi ti·∫øt t√†i kho·∫£n:', error);
        res.status(500).send('L·ªói khi t·∫£i chi ti·∫øt t√†i kho·∫£n');
    }
};
// Kh√≥a t√†i kho·∫£n
exports.lockUser = async (req, res) => {
    try {
        const accountId = req.params.accountId;
        const account = await Account.findByPk(accountId);

        if (!account || account.role === 0) {
            return res.status(404).send('T√†i kho·∫£n kh√¥ng h·ª£p l·ªá.');
        }

        await account.update({ status: 'locked' });
        console.log(`üîí T√†i kho·∫£n ${account.username} (ID: ${accountId}) ƒë√£ b·ªã kh√≥a.`);
        res.redirect(`/admin/users/${accountId}`); // Quay l·∫°i trang chi ti·∫øt
    } catch (error) {
        console.error('‚ùå L·ªói khi kh√≥a t√†i kho·∫£n:', error);
        res.status(500).send('L·ªói khi kh√≥a t√†i kho·∫£n');
    }
};

// M·ªü kh√≥a t√†i kho·∫£n
exports.unlockUser = async (req, res) => {
    try {
        const accountId = req.params.accountId;
        const account = await Account.findByPk(accountId);

        if (!account || account.role === 0) {
            return res.status(404).send('T√†i kho·∫£n kh√¥ng h·ª£p l·ªá.');
        }

        await account.update({ status: 'active' });
        console.log(`üîì T√†i kho·∫£n ${account.username} (ID: ${accountId}) ƒë√£ ƒë∆∞·ª£c m·ªü kh√≥a.`);
        res.redirect(`/admin/users/${accountId}`); // Quay l·∫°i trang chi ti·∫øt
    } catch (error) {
        console.error('‚ùå L·ªói khi m·ªü kh√≥a t√†i kho·∫£n:', error);
        res.status(500).send('L·ªói khi m·ªü kh√≥a t√†i kho·∫£n');
    }
};

// X√≥a t√†i kho·∫£n (Soft delete)
exports.deleteUser = async (req, res) => {
    try {
        const accountId = req.params.accountId;
        const account = await Account.findByPk(accountId);

        if (!account || account.role === 0) {
            return res.status(404).send('T√†i kho·∫£n kh√¥ng h·ª£p l·ªá.');
        }

        await account.update({ status: 'deleted' });
        console.log(`üóëÔ∏è T√†i kho·∫£n ${account.username} (ID: ${accountId}) ƒë√£ b·ªã x√≥a (soft delete).`);
        res.redirect('/admin/users'); // Quay l·∫°i danh s√°ch
    } catch (error) {
        console.error('‚ùå L·ªói khi x√≥a t√†i kho·∫£n:', error);
        res.status(500).send('L·ªói khi x√≥a t√†i kho·∫£n');
    }
};