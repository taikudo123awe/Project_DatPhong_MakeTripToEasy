const Provider = require('../models/Provider');
const Room = require('../models/Room');
const PaymentInfo = require('../models/PaymentInfo');
const validator = require('validator');
const sequelize = require('../config/database');
const Account = require('../models/Account');
const fs = require('fs');
const path = require('path');
const { Op } = require('sequelize');

// 1Ô∏è‚É£ Hi·ªÉn th·ªã danh s√°ch ph√≤ng (qu·∫£n l√Ω b√†i ƒëƒÉng)
exports.getAllRooms = async (req, res) => {
    try {
        const { status } = req.query; // l·ªçc theo tr·∫°ng th√°i
        const whereCondition = status ? { approvalStatus: status } : {};

        const rooms = await Room.findAll({
            where: whereCondition,
            include: [{ model: Provider, attributes: ['providerName', 'email'] }],
            order: [['postedAt', 'DESC']]
        });

        res.render('admin/roomList', { rooms, selectedStatus: status });
    } catch (error) {
        console.error('‚ùå L·ªói khi l·∫•y danh s√°ch ph√≤ng:', error);
        res.status(500).send('L·ªói khi t·∫£i danh s√°ch ph√≤ng');
    }
};

// 2Ô∏è‚É£ Xem chi ti·∫øt b√†i ƒëƒÉng
exports.getRoomDetail = async (req, res) => {
    try {
        const room = await Room.findByPk(req.params.id, {
            include: [{ model: Provider, attributes: ['providerName', 'email', 'phoneNumber'] }]
        });

        if (!room) return res.status(404).send('Kh√¥ng t√¨m th·∫•y b√†i ƒëƒÉng');

        res.render('admin/roomDetail', { room });
    } catch (error) {
        console.error('‚ùå L·ªói khi l·∫•y chi ti·∫øt ph√≤ng:', error);
        res.status(500).send('L·ªói khi t·∫£i chi ti·∫øt ph√≤ng');
    }
};

// 3Ô∏è‚É£ Duy·ªát b√†i ƒëƒÉng
exports.approveRoom = async (req, res) => {
    try {
        const roomId = req.params.id;
        const room = await Room.findByPk(roomId);

        if (!room) return res.status(404).send('Kh√¥ng t√¨m th·∫•y ph√≤ng');

        await room.update({ approvalStatus: 'ƒê√£ duy·ªát' });

        // üîî G·ª≠i th√¥ng b√°o (v√≠ d·ª• log ra console, ho·∫∑c sau n√†y th√™m g·ª≠i email)
        console.log(`‚úÖ Ph√≤ng "${room.roomName}" ƒë√£ ƒë∆∞·ª£c duy·ªát.`);

        res.redirect('/admin/rooms?status=Ch·ªù duy·ªát');
    } catch (error) {
        console.error('‚ùå L·ªói khi duy·ªát ph√≤ng:', error);
        res.status(500).send('L·ªói khi duy·ªát ph√≤ng');
    }
};

// 4Ô∏è‚É£ T·ª´ ch·ªëi b√†i ƒëƒÉng
exports.rejectRoom = async (req, res) => {
    try {
        const { reason } = req.body;
        const roomId = req.params.id;

        const room = await Room.findByPk(roomId);
        if (!room) return res.status(404).send('Kh√¥ng t√¨m th·∫•y ph√≤ng');

        await room.update({ approvalStatus: 'T·ª´ ch·ªëi' });

        console.log(`‚ùå Ph√≤ng "${room.roomName}" b·ªã t·ª´ ch·ªëi. L√Ω do: ${reason}`);

        res.redirect('/admin/rooms?status=Ch·ªù duy·ªát');
    } catch (error) {
        console.error('‚ùå L·ªói khi t·ª´ ch·ªëi ph√≤ng:', error);
        res.status(500).send('L·ªói khi t·ª´ ch·ªëi ph√≤ng');
    }
};
//ƒê·∫øm t·ªïng s·ªë ph√≤ng v√† s·ªë ph√≤ng c√≥ tr·∫°ng th√°i ch·ªù duy·ªát
exports.getDashboard = async (req, res) => {
    try {
        const admin = req.session.admin;

        const [totalRooms, pendingRooms] = await Promise.all([
            Room.count(),
            Room.count({ where: { approvalStatus: 'Ch·ªù duy·ªát' } })
        ]);

        // Render ra view dashboard v√† truy·ªÅn s·ªë li·ªáu
        res.render('admin/dashboard', {
            admin,
            totalRooms,
            pendingRooms
        });
    } catch (err) {
        console.error('‚ùå L·ªói l·∫•y s·ªë li·ªáu dashboard:', err);
        res.status(500).send('L·ªói t·∫£i dashboard');
    }
};

//Ph∆∞∆°ng th·ª©c n√†y ƒë·ªÉ xo√° ph√≤ng c·ªßa ADMIN
exports.deleteRoom = async (req, res) => {
    try {
        const { roomId } = req.params;
        const { reason } = req.body;

        // Validate l√Ω do x√≥a
        if (!reason || reason.trim() === '') {
            return res.redirect(`/admin/rooms?error=${encodeURIComponent('Vui l√≤ng nh·∫≠p l√Ω do x√≥a b√†i ƒëƒÉng!')}`);
        }

        // T√¨m ph√≤ng c·∫ßn x√≥a
        const room = await Room.findOne({
            where: { roomId: roomId },
            include: [
                {
                    model: Provider,
                    attributes: ['providerId', 'providerName', 'email']
                }
            ]
        });

        // Ki·ªÉm tra ph√≤ng c√≥ t·ªìn t·∫°i kh√¥ng
        if (!room) {
            return res.redirect(`/admin/rooms?error=${encodeURIComponent('Ph√≤ng kh√¥ng t·ªìn t·∫°i ho·∫∑c ƒë√£ b·ªã x√≥a!')}`);
        }

        // L∆∞u th√¥ng tin ph√≤ng tr∆∞·ªõc khi x√≥a (ƒë·ªÉ g·ª≠i th√¥ng b√°o)
        const roomName = room.roomName;
        const providerEmail = room.Provider ? room.Provider.email : null;
        const providerName = room.Provider ? room.Provider.providerName : null;
        const imagePath = room.image; // L∆∞u ƒë∆∞·ªùng d·∫´n ·∫£nh

        // X√≥a ·∫£nh v·∫≠t l√Ω n·∫øu c√≥
        if (imagePath) {
            const fullImagePath = path.join(__dirname, '..', 'public', imagePath);

            // Ki·ªÉm tra file c√≥ t·ªìn t·∫°i kh√¥ng tr∆∞·ªõc khi x√≥a
            if (fs.existsSync(fullImagePath)) {
                try {
                    fs.unlinkSync(fullImagePath);
                    console.log(`ƒê√£ x√≥a ·∫£nh: ${fullImagePath}`);
                } catch (err) {
                    console.error(`L·ªói khi x√≥a ·∫£nh: ${err.message}`);
                }
            }
        }

        // X√≥a ph√≤ng kh·ªèi database
        await room.destroy();

        console.log(`Admin ƒë√£ x√≥a ph√≤ng ID: ${roomId}, T√™n: ${roomName}, L√Ω do: ${reason}`);

        // TODO: G·ª≠i email th√¥ng b√°o cho Provider (n·∫øu c·∫ßn)
        if (providerEmail) {
            // V√≠ d·ª•: G·ªçi h√†m g·ª≠i email
            // await sendEmailToProvider(providerEmail, providerName, roomName, reason);

            console.log(`C·∫ßn g·ª≠i email th√¥ng b√°o ƒë·∫øn: ${providerEmail}`);
            console.log(`N·ªôi dung: Ph√≤ng "${roomName}" ƒë√£ b·ªã x√≥a. L√Ω do: ${reason}`);
        }

        // Chuy·ªÉn h∆∞·ªõng v·ªÅ danh s√°ch ph√≤ng v·ªõi th√¥ng b√°o th√†nh c√¥ng
        res.redirect(`/admin/rooms?success=${encodeURIComponent(`ƒê√£ x√≥a b√†i ƒëƒÉng "${roomName}" th√†nh c√¥ng!`)}`);

    } catch (error) {
        console.error('L·ªói khi x√≥a ph√≤ng:', error);
        res.redirect(`/admin/rooms?error=${encodeURIComponent('ƒê√£ x·∫£y ra l·ªói khi x√≥a b√†i ƒëƒÉng. Vui l√≤ng th·ª≠ l·∫°i!')}`);
    }
};
