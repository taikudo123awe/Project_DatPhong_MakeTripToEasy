const { Op } = require("sequelize");
const Room = require("../models/Room");
const Provider = require("../models/Provider");
const Booking = require("../models/Booking");
const Address = require("../models/Address");
const sequelize = require("../config/database");
const Review = require("../models/Review");
const Customer = require("../models/Customer");
exports.getAllRooms = async (req, res) => {
  try {
    const rooms = await Room.findAll({
      where: { approvalStatus: "ƒê√£ duy·ªát" },
      include: { model: Provider, as: "Provider" },
      order: [["postedAt", "DESC"]],
    });
    res.render("rooms/list", { rooms });
  } catch (err) {
    console.error("‚ùå L·ªói khi t·∫£i danh s√°ch ph√≤ng:", err);
    res.status(500).send("L·ªói khi t·∫£i danh s√°ch ph√≤ng");
  }
};

// ===========================
// L·∫•y danh s√°ch ph√≤ng cho trang ch·ªß /
// ===========================
exports.getRoomsForHome = async (req, res) => {
  try {
    const rooms = await Room.findAll({
      where: { approvalStatus: "ƒê√£ duy·ªát" },
      include: [
        { model: Provider, as: "Provider" },
        { model: Review }, // th√™m ƒë√°nh gi√°
      ],
      order: [["postedAt", "DESC"]],
      limit: 8,
    });

    // ‚úÖ T√≠nh trung b√¨nh sao v√† s·ªë l∆∞·ª£t ƒë√°nh gi√° cho m·ªói ph√≤ng
    const roomsWithRating = rooms.map((room) => {
      const reviews = room.Reviews || [];
      const reviewCount = reviews.length;
      const avgRating =
        reviewCount > 0
          ? (
              reviews.reduce((sum, r) => sum + r.rating, 0) / reviewCount
            ).toFixed(1)
          : null;
      return {
        ...room.toJSON(),
        avgRating,
        reviewCount,
      };
    });

    res.render("home", { rooms: roomsWithRating });
  } catch (err) {
    console.error("‚ùå L·ªói khi t·∫£i trang ch·ªß:", err);
    res.status(500).send("L·ªói khi t·∫£i trang ch·ªß");
  }
};
// ===========================
// Hi·ªÉn th·ªã form th√™m ph√≤ng
// ===========================
exports.showAddRoomForm = async (req, res) => {
  try {
    const addresses = await Address.findAll({
      order: [
        ["city", "ASC"],
        ["district", "ASC"],
        ["ward", "ASC"],
      ],
    });

    const error = req.session.error || null;
    delete req.session.error;

    res.render("provider/add-room", {
      error,
      success: null,
      addresses,
      errors: {}, // ‚úÖ th√™m d√≤ng n√†y
      oldData: {}, // ‚úÖ th√™m d√≤ng n√†y
    });
  } catch (err) {
    console.error("‚ùå L·ªói khi t·∫£i form th√™m ph√≤ng:", err);
    res.status(500).send("L·ªói khi t·∫£i form th√™m ph√≤ng");
  }
};
// Th√™m ph√≤ng m·ªõi
exports.createRoom = async (req, res) => {
  try {
    const providerId = req.session.provider?.id;
    if (!providerId)
      throw new Error("Provider ch∆∞a ƒëƒÉng nh·∫≠p ho·∫∑c session h·∫øt h·∫°n.");

    const {
      roomName,
      customAddress,
      city,
      district,
      ward,
      capacity,
      price,
      amenities,
      description,
    } = req.body;

    // ‚úÖ ·∫¢nh ƒë√£ ƒë∆∞·ª£c validate, ch·ªâ c·∫ßn x·ª≠ l√Ω l∆∞u
    const imagePaths = req.files.map((file) =>
      file.path.replace(/^public[\\/]/, "")
    );

    // T·∫°o ho·∫∑c l·∫•y Address
    let address = await Address.findOne({ where: { city, district, ward } });
    if (!address) address = await Address.create({ city, district, ward });

    const fullAddress = `${customAddress}, ${ward}, ${district}, ${city}`;

    await Room.create({
      roomName,
      fullAddress,
      addressId: address.addressId,
      capacity,
      price,
      amenities,
      description,
      image: imagePaths.join(";"),
      providerId,
      status: "Ho·∫°t ƒë·ªông",
      approvalStatus: "Ch·ªù duy·ªát",
      postedAt: new Date(),
    });

    req.session.success = "‚úÖ Ph√≤ng ƒë√£ ƒë∆∞·ª£c th√™m th√†nh c√¥ng!";
    res.redirect("/provider/dashboard");
  } catch (err) {
    console.error("‚ùå L·ªói khi th√™m ph√≤ng:", err);
    res.status(500).send("L·ªói khi th√™m ph√≤ng: " + err.message);
  }
};
// Chi ti·∫øt ph√≤ng
exports.getRoomDetail = async (req, res) => {
  const roomId = req.params.roomId;
  const { checkInDate, checkOutDate, numberOfGuests } = req.query;

  try {
    const room = await Room.findOne({
      where: { roomId, approvalStatus: "ƒê√£ duy·ªát" },
      include: [
        { model: Provider, as: "Provider" },
        {
          model: Review,
          include: [{ model: Customer, attributes: ["fullName"] }],
          order: [["reviewDate", "DESC"]],
        },
      ],
    });

    if (!room) return res.status(404).send("Kh√¥ng t√¨m th·∫•y ph√≤ng.");

    //l·∫•y d·ªØ li·ªáu t·ª´ t√¨m ki·∫øm
    res.render("rooms/detail", {
      room,
      checkInDate: checkInDate || "",
      checkOutDate: checkOutDate || "",
      numberOfGuests: numberOfGuests || "",
    });
  } catch (err) {
    console.error("‚ùå L·ªói khi t·∫£i th√¥ng tin ph√≤ng:", err);
    res.status(500).send("L·ªói khi t·∫£i th√¥ng tin ph√≤ng");
  }
};

// Hi·ªÉn th·ªã form ch·ªânh s·ª≠a
exports.showEditRoomForm = async (req, res) => {
  try {
    const roomId = req.params.roomId;

    // ‚öôÔ∏è L·∫•y ph√≤ng k√®m Address
    const room = await Room.findByPk(roomId, {
      include: [{ model: Address, as: "address" }],
    });

    if (!room) return res.status(404).send("Kh√¥ng t√¨m th·∫•y ph√≤ng.");

    res.render("provider/edit-room", {
      room,
      errors: {}, // ‚úÖ th√™m d√≤ng n√†y
      oldData: {}, // ‚úÖ th√™m d√≤ng n√†y
      error: null,
    });
  } catch (err) {
    console.error("‚ùå L·ªói khi t·∫£i form ch·ªânh s·ª≠a:", err);
    res.status(500).send("L·ªói khi t·∫£i form ch·ªânh s·ª≠a ph√≤ng.");
  }
};

// C·∫≠p nh·∫≠t ph√≤ng
exports.updateRoom = async (req, res) => {
  try {
    const roomId = req.params.roomId;
    const {
      roomName,
      city,
      district,
      ward,
      customAddress,
      fullAddress,
      capacity,
      price,
      amenities,
      description,
    } = req.body;

    const room = await Room.findByPk(roomId);
    if (!room) {
      req.session.error = "Kh√¥ng t√¨m th·∫•y ph√≤ng.";
      return res.redirect("/provider/dashboard");
    }

    // üü¢ Th√™m ƒëo·∫°n x·ª≠ l√Ω Address ·ªü ƒë√¢y:
    let addressId = room.addressId; // gi·ªØ m·∫∑c ƒë·ªãnh c≈©
    if (city && district && ward) {
      let address = await Address.findOne({ where: { city, district, ward } });
      if (!address) {
        address = await Address.create({ city, district, ward });
      }
      addressId = address.addressId;
    }

    const newFullAddress = customAddress
      ? `${customAddress}, ${ward}, ${district}, ${city}`
      : fullAddress;

    // ·∫¢nh m·ªõi (n·∫øu c√≥)
    let image = null;
    if (req.files?.length > 0) {
      const allowed = ["image/jpeg", "image/png", "image/jpg"];
      image = req.files
        .filter((f) => allowed.includes(f.mimetype))
        .map((f) => f.path.replace(/^public[\\/]/, ""))
        .join(";");
    }

    // Tr·∫°ng th√°i duy·ªát
    let approvalStatus = room.approvalStatus;
    if (room.approvalStatus === "ƒê√£ duy·ªát") approvalStatus = "Ch·ªù duy·ªát";

    await Room.update(
      {
        roomName,
        fullAddress: newFullAddress,
        addressId, // ‚úÖ c·∫≠p nh·∫≠t addressId m·ªõi
        capacity,
        price,
        amenities,
        description,
        approvalStatus,
        ...(image && { image }),
      },
      { where: { roomId } }
    );

    req.session.success =
      approvalStatus === "Ch·ªù duy·ªát"
        ? "‚úÖ Ph√≤ng ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t v√† chuy·ªÉn l·∫°i tr·∫°ng th√°i 'Ch·ªù duy·ªát'."
        : "‚úÖ Ph√≤ng ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t.";
    res.redirect("/provider/dashboard");
  } catch (err) {
    console.error("‚ùå L·ªói khi c·∫≠p nh·∫≠t ph√≤ng:", err);
    req.session.error = "ƒê√£ x·∫£y ra l·ªói khi c·∫≠p nh·∫≠t ph√≤ng.";
    res.redirect("/provider/dashboard");
  }
};
// X√≥a (·∫©n) ph√≤ng ‚Äî soft delete
exports.deleteRoom = async (req, res) => {
  try {
    const { roomId } = req.params;
    const providerId = req.session.provider?.id;

    // 1Ô∏è‚É£ L·∫•y ph√≤ng c·∫ßn x√≥a
    const room = await Room.findByPk(roomId);

    if (!room) {
      req.session.error = "Kh√¥ng t√¨m th·∫•y ph√≤ng c·∫ßn x√≥a.";
      return res.redirect("/provider/dashboard");
    }

    // 2Ô∏è‚É£ Ki·ªÉm tra quy·ªÅn s·ªü h·ªØu
    if (room.providerId !== providerId) {
      req.session.error = "B·∫°n kh√¥ng c√≥ quy·ªÅn x√≥a ph√≤ng n√†y.";
      return res.redirect("/provider/dashboard");
    }

    // 3Ô∏è‚É£ Ch·ªâ ƒë·ªïi tr·∫°ng th√°i, kh√¥ng x√≥a d·ªØ li·ªáu
    await Room.update({ status: "Ng∆∞ng ho·∫°t ƒë·ªông" }, { where: { roomId } });

    req.session.success = `üóëÔ∏è Ph√≤ng "${room.roomName}" ƒë√£ ƒë∆∞·ª£c ·∫©n kh·ªèi h·ªá th·ªëng (ng∆∞ng ho·∫°t ƒë·ªông).`;
    res.redirect("/provider/dashboard");
  } catch (err) {
    console.error("‚ùå L·ªói khi ·∫©n ph√≤ng:", err);
    req.session.error = "ƒê√£ x·∫£y ra l·ªói khi ·∫©n ph√≤ng. Vui l√≤ng th·ª≠ l·∫°i.";
    res.redirect("/provider/dashboard");
  }
};

//T√¨m ki·∫øm ph√≤ng
exports.searchRooms = async (req, res) => {
  try {
    const validated = req.validatedSearch || {};
    const city = validated.city || "";
    const district = validated.district || "";
    const ward = validated.ward || "";
    const checkInDate = validated.checkInDate || null;
    const checkOutDate = validated.checkOutDate || null;
    const numGuests = validated.numGuests || 1;
    const numRooms = validated.numRooms || 1;

    // B1: T√¨m danh s√°ch ph√≤ng ƒë√£ b·ªã ƒë·∫∑t tr√πng kho·∫£ng ng√†y
    let bookedRoomIds = [];
    if (checkInDate && checkOutDate) {
      const overlappingBookings = await Booking.findAll({
        where: {
          [Op.and]: [
            { checkInDate: { [Op.lt]: checkOutDate } },
            { checkOutDate: { [Op.gt]: checkInDate } },
            { status: { [Op.ne]: "ƒê√£ h·ªßy" } }, // Ch·ªâ l·∫•y c√°c booking ch∆∞a h·ªßy
          ],
        },
        attributes: ["roomId"],
      });
      bookedRoomIds = overlappingBookings.map((b) => b.roomId);
    }

    // B2: L·∫•y danh s√°ch ph√≤ng tr·ªëng
    const availableRooms = await Room.findAll({
      where: {
        [Op.and]: [
          bookedRoomIds.length > 0
            ? { roomId: { [Op.notIn]: bookedRoomIds } }
            : {},
          { approvalStatus: "ƒê√£ duy·ªát" },
          { status: "Ho·∫°t ƒë·ªông" },
          { capacity: { [Op.gte]: numGuests } }, // ch·ªâ l·∫•y ph√≤ng c√≥ ƒë·ªß s·ª©c ch·ª©a
        ],
      },
      include: [
        {
          model: Address,
          as: "address",
          where: {
            [Op.and]: [
              city
                ? sequelize.where(
                    sequelize.fn("LOWER", sequelize.col("address.city")),
                    { [Op.like]: `%${city.toLowerCase()}%` }
                  )
                : null,
              district
                ? sequelize.where(
                    sequelize.fn("LOWER", sequelize.col("address.district")),
                    { [Op.like]: `%${district.toLowerCase()}%` }
                  )
                : null,
              ward
                ? sequelize.where(
                    sequelize.fn("LOWER", sequelize.col("address.ward")),
                    { [Op.like]: `%${ward.toLowerCase()}%` }
                  )
                : null,
            ].filter(Boolean), // l·ªçc null ƒë·ªÉ tr√°nh l·ªói
          },
          attributes: ["city", "district", "ward"],
        },
      ],

      order: [["postedAt", "DESC"]],
    });

    // B3: N·∫øu kh√¥ng c√≥ ph√≤ng ph√π h·ª£p
    if (!availableRooms || availableRooms.length === 0) {
      return res.render("list", {
        rooms: [],
        keyword: city || district || ward,
        dateRange:
          checkInDate && checkOutDate
            ? `${checkInDate.toISOString().slice(0, 10)} to ${checkOutDate
                .toISOString()
                .slice(0, 10)}`
            : null,
      });
    }

    console.log("‚úÖ searchParams:", {
      checkInDate,
      checkOutDate,
      numGuests,
      numRooms,
    });

    //l∆∞u d·ªØ li·ªáu t√¨m ki·∫øm
    // Truy·ªÅn th√™m th√¥ng tin t√¨m ki·∫øm ƒë·ªÉ hi·ªÉn th·ªã / d√πng l·∫°i ·ªü trang ƒë·∫∑t ph√≤ng
    const searchParams = {
      checkInDate: checkInDate ? checkInDate.toISOString().slice(0, 10) : "",
      checkOutDate: checkOutDate ? checkOutDate.toISOString().slice(0, 10) : "",
      numGuests,
      numRooms,
    };

    // B4: Render danh s√°ch ph√≤ng
    res.render("list", {
      rooms: availableRooms,
      keyword: city || district || ward,
      dateRange:
        checkInDate && checkOutDate
          ? `${checkInDate.toISOString().slice(0, 10)} to ${checkOutDate
              .toISOString()
              .slice(0, 10)}`
          : null,
      searchParams,
    });
  } catch (err) {
    console.error("‚ùå L·ªói khi t√¨m ki·∫øm ph√≤ng:", err);
    res.status(500).send("L·ªói khi t√¨m ki·∫øm ph√≤ng.");
  }
};
