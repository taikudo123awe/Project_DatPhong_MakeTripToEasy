// controllers/roomController.js
const Room = require("../models/Room");
const Provider = require("../models/Provider");

// ===========================
// L·∫•y danh s√°ch ph√≤ng cho trang /rooms
// ===========================
exports.getAllRooms = async (req, res) => {
  try {
    const rooms = await Room.findAll({
      where: { approvalStatus: "ƒê√£ duy·ªát" },
      include: { model: Provider, as: "provider" }, // ‚úÖ th√™m alias
    });
    res.render("rooms/list", { rooms });
  } catch (err) {
    console.error("‚ùå L·ªói khi t·∫£i danh s√°ch ph√≤ng:", err);
    res.status(500).send("L·ªói khi t·∫£i danh s√°ch ph√≤ng");
  }
};

// ===========================
// L·∫•y danh s√°ch ph√≤ng cho trang ch·ªß /
// ===========================
exports.getRoomsForHome = async (req, res) => {
  try {
    const rooms = await Room.findAll({
      where: { approvalStatus: "ƒê√£ duy·ªát" },
      include: { model: Provider, as: "provider" }, // ‚úÖ th√™m alias
      order: [["postedAt", "DESC"]],
      limit: 8,
    });
    res.render("home", { rooms });
  } catch (err) {
    console.error("‚ùå L·ªói khi t·∫£i trang ch·ªß:", err);
    res.status(500).send("L·ªói khi t·∫£i trang ch·ªß");
  }
};

// ===========================
// Hi·ªÉn th·ªã form th√™m ph√≤ng (cho provider)
// ===========================
exports.showAddRoomForm = (req, res) => {
  res.render("provider/add-room", { error: null, success: null });
};

// ===========================
// X·ª≠ l√Ω th√™m ph√≤ng (Use Case NC04 - ƒêƒÉng th√¥ng tin ph√≤ng)
// ===========================
exports.createRoom = async (req, res) => {
  try {
    console.log("üì© D·ªØ li·ªáu form:", req.body);
    console.log("üì∑ File upload:", req.file);
    console.log("üë§ Provider trong session:", req.session.provider);

    const providerId = req.session.provider?.providerId;
    if (!providerId) {
      throw new Error("Provider ch∆∞a ƒëƒÉng nh·∫≠p ho·∫∑c session h·∫øt h·∫°n.");
    }

    const { roomName, fullAddress, capacity, price, amenities, description } =
      req.body;
    const errors = [];

    // --- Ki·ªÉm tra h·ª£p l·ªá d·ªØ li·ªáu ---
    const roomNameRegex = /^[a-zA-Z√Ä-·ªπ0-9\s]+$/;
    if (!roomName || roomName.trim() === "") {
      errors.push("T√™n ph√≤ng kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng.");
    } else if (!roomNameRegex.test(roomName.trim())) {
      errors.push("T√™n ph√≤ng kh√¥ng h·ª£p l·ªá. Kh√¥ng ƒë∆∞·ª£c ch·ª©a k√Ω t·ª± ƒë·∫∑c bi·ªát.");
    }
    if (!fullAddress || fullAddress.trim() === "") {
      errors.push("ƒê·ªãa ch·ªâ kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng.");
    }
    if (!capacity || isNaN(capacity) || capacity < 1) {
      errors.push("S·ªë l∆∞·ª£ng ng∆∞·ªùi ·ªü ph·∫£i ‚â• 1.");
    } else if (!Number.isInteger(Number(capacity))) {
      errors.push("S·ª©c ch·ª©a ph·∫£i l√† s·ªë nguy√™n.");
    }
    if (!price || isNaN(price) || price <= 0) {
      errors.push("Gi√° ph√≤ng ph·∫£i l√† s·ªë > 0.");
    }
    if (!amenities || amenities.trim() === "") {
      errors.push("Vui l√≤ng nh·∫≠p ti·ªán √≠ch c·ªßa ph√≤ng.");
    }
    if (!description || description.trim() === "") {
      errors.push("Vui l√≤ng nh·∫≠p m√¥ t·∫£ ph√≤ng.");
    }

    // --- Ki·ªÉm tra ·∫£nh ---
    let imagePath = null;
    if (!req.file) {
      errors.push("Vui l√≤ng t·∫£i l√™n ·∫£nh ph√≤ng.");
    } else {
      const allowedTypes = ["image/jpeg", "image/png", "image/jpg"];
      if (!allowedTypes.includes(req.file.mimetype)) {
        errors.push("·∫¢nh kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng (.jpg, .jpeg, .png).");
      } else {
        imagePath = req.file.path
          .replace("public\\", "")
          .replace("public/", "");
      }
    }

    // --- N·∫øu c√≥ l·ªói, hi·ªÉn th·ªã l·∫°i form ---
    if (errors.length > 0) {
      console.warn("‚ö†Ô∏è L·ªói x√°c th·ª±c:", errors);
      return res.render("provider/add-room", {
        error: errors.join("<br>"),
        success: null,
      });
    }

    // --- L∆∞u d·ªØ li·ªáu h·ª£p l·ªá v√†o CSDL ---
    const newRoom = await Room.create({
      roomName: roomName.trim(),
      fullAddress: fullAddress.trim(),
      capacity: parseInt(capacity),
      price: parseFloat(price),
      amenities: amenities.trim(),
      description: description.trim(),
      image: imagePath,
      providerId,
      status: "Ph√≤ng tr·ªëng",
      approvalStatus: "Ch·ªù duy·ªát",
      postedAt: new Date(),
    });

    console.log("‚úÖ Ph√≤ng ƒë√£ t·∫°o:", newRoom.toJSON());
    res.redirect("/provider/dashboard");
  } catch (err) {
    console.error("‚ùå L·ªói khi th√™m ph√≤ng:", err.message, err.stack);
    res.status(500).send("L·ªói khi th√™m ph√≤ng: " + err.message);
  }
};
// Hi·ªÉn th·ªã form s·ª≠a ph√≤ng
exports.showEditRoomForm = async (req, res) => {
  try {
    const roomId = req.params.roomId;
    const room = await Room.findByPk(roomId);
    if (!room) return res.status(404).send("Kh√¥ng t√¨m th·∫•y ph√≤ng");
    res.render("provider/edit-room", { room, error: null });
  } catch (err) {
    console.error("‚ùå L·ªói load form:", err);
    res.status(500).send("L·ªói khi t·∫£i form s·ª≠a ph√≤ng");
  }
};

// s·ª≠a ph√≤ng
exports.updateRoom = async (req, res) => {
  try {
    const roomId = req.params.roomId;
    const { roomName, fullAddress, capacity, price, amenities, description } =
      req.body;

    // N·∫øu c√≥ ·∫£nh m·ªõi th√¨ l∆∞u l·∫°i
    let image = null;
    if (req.files && req.files.length > 0) {
      image = req.files[0].path.replace("public\\", "").replace("public/", "");
    }

    // Khi c·∫≠p nh·∫≠t, chuy·ªÉn tr·∫°ng th√°i duy·ªát v·ªÅ "Ch·ªù duy·ªát"
    const updateData = {
      roomName,
      fullAddress,
      capacity,
      price,
      amenities,
      description,
      approvalStatus: "Ch·ªù duy·ªát", // ‚úÖ c·∫≠p nh·∫≠t tr·∫°ng th√°i duy·ªát
    };

    if (image) updateData.image = image;

    await Room.update(updateData, { where: { roomId } });

    console.log(
      `‚úÖ Ph√≤ng ${roomId} ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t, tr·∫°ng th√°i chuy·ªÉn v·ªÅ "Ch·ªù duy·ªát"`
    );
    res.redirect("/provider/dashboard");
  } catch (err) {
    console.error("‚ùå L·ªói c·∫≠p nh·∫≠t ph√≤ng:", err);
    res.status(500).send("L·ªói khi c·∫≠p nh·∫≠t ph√≤ng");
  }
};
// X√≥a ph√≤ng
exports.deleteRoom = async (req, res) => {
  try {
    const { roomId } = req.params;

    // Ki·ªÉm tra ph√≤ng t·ªìn t·∫°i
    const room = await Room.findByPk(roomId);
    if (!room) {
      req.session.error = "Kh√¥ng t√¨m th·∫•y ph√≤ng c·∫ßn x√≥a.";
      return res.redirect("/provider/dashboard");
    }

    // Ch·ªâ cho ph√©p x√≥a n·∫øu l√† ch·ªß ph√≤ng
    const providerId = req.session.provider?.providerId;
    if (room.providerId !== providerId) {
      req.session.error = "B·∫°n kh√¥ng c√≥ quy·ªÅn x√≥a ph√≤ng n√†y.";
      return res.redirect("/provider/dashboard");
    }

    // Th·ª±c hi·ªán x√≥a
    await Room.destroy({ where: { roomId } });

    // L∆∞u th√¥ng b√°o v√†o session
    req.session.success = `Ph√≤ng "${room.roomName}" ƒë√£ ƒë∆∞·ª£c x√≥a th√†nh c√¥ng.`;

    // Quay l·∫°i dashboard
    res.redirect("/provider/dashboard");
  } catch (err) {
    console.error("‚ùå L·ªói khi x√≥a ph√≤ng:", err);
    req.session.error = "ƒê√£ x·∫£y ra l·ªói khi x√≥a ph√≤ng. Vui l√≤ng th·ª≠ l·∫°i.";
    res.redirect("/provider/dashboard");
  }
};
