const MAX_FILE_SIZE = 5 * 1024 * 1024; // 5MB
const ALLOWED_TYPES = ["image/jpeg", "image/png", "image/jpg"];

function isNumber(value) {
  return !isNaN(value) && isFinite(value);
}

function sanitizeText(text) {
  return text?.trim() || "";
}

module.exports = {
  // =============================
  // üè† Validate th√™m ph√≤ng m·ªõi
  // =============================
  validateAddRoom: (req, res, next) => {
    const {
      roomName = "",
      capacity = "",
      price = "",
      amenities = "",
      description = "",
      customAddress = "",
      city = "",
      district = "",
      ward = "",
    } = req.body;

    const errors = {};
    let hasMissing = false;

    // ============ Quy t·∫Øc ============
    // Cho ph√©p ch·ªØ c√≥ d·∫•u, s·ªë, kho·∫£ng tr·∫Øng, -, ., ,, (), /
    const nameRegex = /^[\p{L}\p{N}\s\-\.,()\/]+$/u;
    // ƒê·ªãa ch·ªâ: ch·ªØ c√≥ d·∫•u, s·ªë, kho·∫£ng tr·∫Øng v√† -, ., ,, /
    const addressRegex = /^[\p{L}\p{N}\s\-\.,\/]+$/u;
    // Ti·ªán √≠ch: danh s√°ch ngƒÉn b·ªüi d·∫•u ph·∫©y, kh√¥ng c√≥ k√Ω t·ª± l·∫°
    const amenitiesRegex =
      /^[\p{L}\p{N}\s\-\./()]+(,\s*[\p{L}\p{N}\s\-\./()]+)*$/u;

    // Chu·∫©n ho√°
    const trimmed = {
      roomName: roomName.trim(),
      customAddress: customAddress.trim(),
      amenities: amenities.trim(),
      description: description.trim(),
      city: String(city).trim(),
      district: String(district).trim(),
      ward: String(ward).trim(),
    };

    // -------- Ki·ªÉm tra thi·∫øu chung --------
    const requiredMap = {
      roomName: "Vui l√≤ng nh·∫≠p t√™n ph√≤ng.",
      customAddress: "Vui l√≤ng nh·∫≠p t√™n ƒë∆∞·ªùng/s·ªë nh√†.",
      city: "Vui l√≤ng ch·ªçn Th√†nh ph·ªë.",
      district: "Vui l√≤ng ch·ªçn Qu·∫≠n/Huy·ªán.",
      ward: "Vui l√≤ng ch·ªçn Ph∆∞·ªùng/X√£.",
      capacity: "Vui l√≤ng nh·∫≠p s·ª©c ch·ª©a.",
      price: "Vui l√≤ng nh·∫≠p gi√° ph√≤ng.",
      amenities: "Vui l√≤ng nh·∫≠p ti·ªán √≠ch c·ªßa ph√≤ng.",
      description: "Vui l√≤ng nh·∫≠p m√¥ t·∫£ chi ti·∫øt v·ªÅ ph√≤ng.",
    };

    Object.entries(requiredMap).forEach(([field, msg]) => {
      const value =
        field === "capacity"
          ? capacity
          : field === "price"
          ? price
          : trimmed[field] ?? "";
      if (value === "" || value === null || value === undefined) {
        hasMissing = true;
        if (!errors[field]) errors[field] = msg;
      }
    });

    if (hasMissing) {
      errors._general = "Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin.";
    }

    // -------- Ki·ªÉm tra chi ti·∫øt t·ª´ng tr∆∞·ªùng --------
    // T√™n ph√≤ng
    if (trimmed.roomName) {
      if (!nameRegex.test(trimmed.roomName)) {
        errors.roomName = "T√™n ph√≤ng ch·ª©a k√Ω t·ª± kh√¥ng h·ª£p l·ªá.";
      } else if (trimmed.roomName.length < 3 || trimmed.roomName.length > 100) {
        errors.roomName = "T√™n ph√≤ng ph·∫£i t·ª´ 3‚Äì100 k√Ω t·ª±.";
      }
    }

    // ƒê·ªãa ch·ªâ
    if (trimmed.customAddress) {
      if (!addressRegex.test(trimmed.customAddress)) {
        errors.customAddress =
          "ƒê·ªãa ch·ªâ ch·ªâ ƒë∆∞·ª£c ch·ª©a ch·ªØ, s·ªë, kho·∫£ng tr·∫Øng v√† -, ., , , /.";
      } else if (
        trimmed.customAddress.length < 3 ||
        trimmed.customAddress.length > 120
      ) {
        errors.customAddress = "ƒê·ªãa ch·ªâ ph·∫£i t·ª´ 3‚Äì120 k√Ω t·ª±.";
      }
    }

    // S·ª©c ch·ª©a
    const cap = parseInt(capacity, 10);
    if (!Number.isNaN(cap)) {
      if (!Number.isInteger(cap) || cap < 1 || cap > 50) {
        errors.capacity = "S·ª©c ch·ª©a ph·∫£i l√† s·ªë nguy√™n t·ª´ 1‚Äì50.";
      }
    }

    // Gi√° ph√≤ng
    const pr = Number(price);
    if (!Number.isNaN(pr)) {
      if (!(pr > 0) || pr > 1e11) {
        errors.price = "Gi√° ph√≤ng ph·∫£i > 0 v√† nh·ªè h∆°n 100.000.000.000.";
      }
    }

    // Ti·ªán √≠ch
    if (trimmed.amenities) {
      if (trimmed.amenities.length > 255) {
        errors.amenities = "Ti·ªán √≠ch t·ªëi ƒëa 255 k√Ω t·ª±.";
      } else if (!amenitiesRegex.test(trimmed.amenities)) {
        errors.amenities =
          "Ti·ªán √≠ch ch·ªâ ch·ª©a ch·ªØ, s·ªë, kho·∫£ng tr·∫Øng, -, ., /, () (ngƒÉn c√°ch b·∫±ng d·∫•u ph·∫©y).";
      }
    }

    // M√¥ t·∫£
    if (trimmed.description) {
      if (trimmed.description.length < 20) {
        errors.description = "M√¥ t·∫£ ph·∫£i c√≥ √≠t nh·∫•t 20 k√Ω t·ª±.";
      } else if (trimmed.description.length > 2000) {
        errors.description = "M√¥ t·∫£ t·ªëi ƒëa 2000 k√Ω t·ª±.";
      }
    }

    // ·∫¢nh
    const files = Array.isArray(req.files) ? req.files : [];
    if (files.length === 0) {
      errors.images = "Vui l√≤ng t·∫£i l√™n √≠t nh·∫•t 1 ·∫£nh ph√≤ng.";
    } else {
      if (files.length > 10) {
        errors.images = "Ch·ªâ ƒë∆∞·ª£c t·∫£i t·ªëi ƒëa 10 ·∫£nh.";
      } else {
        for (const f of files) {
          if (!ALLOWED_TYPES.includes(f.mimetype)) {
            errors.images = "Ch·ªâ ch·∫•p nh·∫≠n ·∫£nh .jpg, .jpeg, .png.";
            break;
          }
          if (f.size > MAX_FILE_SIZE) {
            errors.images = "M·ªói ·∫£nh t·ªëi ƒëa 5MB.";
            break;
          }
        }
      }
    }

    // -------- N·∫øu c√≥ l·ªói -> render l·∫°i form --------
    if (Object.keys(errors).length > 0) {
      return res.status(400).render("provider/add-room", {
        error: null,
        errors,
        oldData: {
          roomName: trimmed.roomName,
          capacity,
          price,
          amenities: trimmed.amenities,
          description: trimmed.description,
          customAddress: trimmed.customAddress,
          city: trimmed.city,
          district: trimmed.district,
          ward: trimmed.ward,
        },
      });
    }

    next();
  },

  // üõ†Ô∏è Validate ch·ªânh s·ª≠a ph√≤ng
  validateEditRoom: (req, res, next) => {
    const {
      roomName = "",
      fullAddress = "",
      capacity = "",
      price = "",
      amenities = "",
      description = "",
      city = "",
      district = "",
      ward = "",
      customAddress = "",
    } = req.body;

    const errors = {};
    let hasMissing = false;

    // Quy t·∫Øc gi·ªëng validateAddRoom
    const nameRegex = /^[\p{L}\p{N}\s\-\.,()\/]+$/u;
    const addressRegex = /^[\p{L}\p{N}\s\-\.,\/]+$/u;
    const amenitiesRegex =
      /^[\p{L}\p{N}\s\-\./()]+(,\s*[\p{L}\p{N}\s\-\./()]+)*$/u;

    const trimmed = {
      roomName: roomName.trim(),
      fullAddress: fullAddress.trim(),
      customAddress: customAddress.trim(),
      amenities: amenities.trim(),
      description: description.trim(),
    };

    // -------- Ki·ªÉm tra thi·∫øu chung --------
    const requiredMap = {
      roomName: "Vui l√≤ng nh·∫≠p t√™n ph√≤ng.",
      fullAddress: "Vui l√≤ng nh·∫≠p ho·∫∑c ch·ªçn l·∫°i ƒë·ªãa ch·ªâ ph√≤ng.",
      capacity: "Vui l√≤ng nh·∫≠p s·ª©c ch·ª©a.",
      price: "Vui l√≤ng nh·∫≠p gi√° ph√≤ng.",
      amenities: "Vui l√≤ng nh·∫≠p ti·ªán √≠ch c·ªßa ph√≤ng.",
      description: "Vui l√≤ng nh·∫≠p m√¥ t·∫£ chi ti·∫øt v·ªÅ ph√≤ng.",
    };

    Object.entries(requiredMap).forEach(([field, msg]) => {
      const value =
        field === "capacity"
          ? capacity
          : field === "price"
          ? price
          : trimmed[field] ?? "";
      if (value === "" || value === null || value === undefined) {
        hasMissing = true;
        if (!errors[field]) errors[field] = msg;
      }
    });

    if (hasMissing) {
      errors._general = "Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin.";
    }

    // -------- Ki·ªÉm tra chi ti·∫øt --------
    // T√™n ph√≤ng
    if (trimmed.roomName) {
      if (!nameRegex.test(trimmed.roomName)) {
        errors.roomName = "T√™n ph√≤ng ch·ª©a k√Ω t·ª± kh√¥ng h·ª£p l·ªá.";
      } else if (trimmed.roomName.length < 3 || trimmed.roomName.length > 100) {
        errors.roomName = "T√™n ph√≤ng ph·∫£i t·ª´ 3‚Äì100 k√Ω t·ª±.";
      }
    }

    // ƒê·ªãa ch·ªâ
    if (trimmed.customAddress) {
      if (!addressRegex.test(trimmed.customAddress)) {
        errors.customAddress =
          "ƒê·ªãa ch·ªâ ch·ªâ ch·ª©a ch·ªØ, s·ªë, kho·∫£ng tr·∫Øng v√† -, ., , , /.";
      } else if (
        trimmed.customAddress.length < 3 ||
        trimmed.customAddress.length > 120
      ) {
        errors.customAddress = "ƒê·ªãa ch·ªâ ph·∫£i t·ª´ 3‚Äì120 k√Ω t·ª±.";
      }
    }

    // S·ª©c ch·ª©a
    const cap = parseInt(capacity, 10);
    if (!Number.isNaN(cap)) {
      if (!Number.isInteger(cap) || cap < 1 || cap > 50) {
        errors.capacity = "S·ª©c ch·ª©a ph·∫£i l√† s·ªë nguy√™n t·ª´ 1‚Äì50.";
      }
    }

    // Gi√°
    const pr = Number(price);
    if (!Number.isNaN(pr)) {
      if (!(pr > 0) || pr > 1e11) {
        errors.price = "Gi√° ph√≤ng ph·∫£i > 0 v√† nh·ªè h∆°n 100.000.000.000.";
      }
    }

    // Ti·ªán √≠ch
    if (trimmed.amenities) {
      if (trimmed.amenities.length > 255) {
        errors.amenities = "Ti·ªán √≠ch t·ªëi ƒëa 255 k√Ω t·ª±.";
      } else if (!amenitiesRegex.test(trimmed.amenities)) {
        errors.amenities =
          "Ti·ªán √≠ch ch·ªâ ch·ª©a ch·ªØ, s·ªë, kho·∫£ng tr·∫Øng, -, ., /, () (ngƒÉn c√°ch b·∫±ng d·∫•u ph·∫©y).";
      }
    }

    // M√¥ t·∫£
    if (trimmed.description) {
      if (trimmed.description.length < 20) {
        errors.description = "M√¥ t·∫£ ph·∫£i c√≥ √≠t nh·∫•t 20 k√Ω t·ª±.";
      } else if (trimmed.description.length > 2000) {
        errors.description = "M√¥ t·∫£ t·ªëi ƒëa 2000 k√Ω t·ª±.";
      }
    }

    // ·∫¢nh upload
    if (req.files && req.files.length > 0) {
      if (req.files.length > 10) {
        errors.images = "Ch·ªâ ƒë∆∞·ª£c t·∫£i t·ªëi ƒëa 10 ·∫£nh.";
      } else {
        req.files.forEach((file) => {
          if (!ALLOWED_TYPES.includes(file.mimetype)) {
            errors.images = `·∫¢nh "${file.originalname}" kh√¥ng h·ª£p l·ªá.`;
          } else if (file.size > MAX_FILE_SIZE) {
            errors.images = `·∫¢nh "${file.originalname}" v∆∞·ª£t qu√° 5MB.`;
          }
        });
      }
    }

    // ‚ùå N·∫øu c√≥ l·ªói ‚Üí render l·∫°i form s·ª≠a v·ªõi d·ªØ li·ªáu c≈©
    if (Object.keys(errors).length > 0) {
      const { roomId } = req.params;

      // L·∫•y l·∫°i d·ªØ li·ªáu ph√≤ng hi·ªán t·∫°i ƒë·ªÉ render
      const Room = require("../models/Room");
      const Address = require("../models/Address");

      return Room.findByPk(roomId, {
        include: [{ model: Address, as: "address" }],
      })
        .then((room) => {
          if (!room) {
            return res.redirect("/provider/dashboard");
          }
          res.status(400).render("provider/edit-room", {
            room,
            error: null,
            errors,
            oldData: {
              roomName: trimmed.roomName,
              capacity,
              price,
              amenities: trimmed.amenities,
              description: trimmed.description,
              customAddress: trimmed.customAddress,
              city,
              district,
              ward,
              fullAddress,
            },
          });
        })
        .catch((err) => {
          console.error("‚ùå L·ªói khi render l·∫°i form ch·ªânh s·ª≠a:", err);
          res.redirect("/provider/dashboard");
        });
    }

    next();
  },
};
